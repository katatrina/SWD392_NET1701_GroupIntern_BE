// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: schedules.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createExaminationScheduleDetail = `-- name: CreateExaminationScheduleDetail :one
INSERT INTO examination_schedule_detail (schedule_id)
VALUES ($1) RETURNING schedule_id, service_category_id, slots_remaining, created_at
`

func (q *Queries) CreateExaminationScheduleDetail(ctx context.Context, scheduleID int64) (ExaminationScheduleDetail, error) {
	row := q.db.QueryRowContext(ctx, createExaminationScheduleDetail, scheduleID)
	var i ExaminationScheduleDetail
	err := row.Scan(
		&i.ScheduleID,
		&i.ServiceCategoryID,
		&i.SlotsRemaining,
		&i.CreatedAt,
	)
	return i, err
}

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (type, start_time, end_time, dentist_id, room_id)
VALUES ($1, $2, $3, $4, $5) RETURNING id, type, start_time, end_time, dentist_id, room_id, created_at
`

type CreateScheduleParams struct {
	Type      string    `json:"type"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	DentistID int64     `json:"dentist_id"`
	RoomID    int64     `json:"room_id"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.Type,
		arg.StartTime,
		arg.EndTime,
		arg.DentistID,
		arg.RoomID,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.StartTime,
		&i.EndTime,
		&i.DentistID,
		&i.RoomID,
		&i.CreatedAt,
	)
	return i, err
}

const getExaminationScheduleDetail = `-- name: GetExaminationScheduleDetail :one
SELECT s.id,
       s.start_time,
       s.end_time,
       u.full_name as dentist_name,
       r.name      as room_name,
       esd.slots_remaining
FROM schedules s
         JOIN examination_schedule_detail esd ON s.id = esd.schedule_id
         JOIN users u ON s.dentist_id = u.id
         JOIN rooms r ON s.room_id = r.id
WHERE s.id = $1
`

type GetExaminationScheduleDetailRow struct {
	ID             int64     `json:"id"`
	StartTime      time.Time `json:"start_time"`
	EndTime        time.Time `json:"end_time"`
	DentistName    string    `json:"dentist_name"`
	RoomName       string    `json:"room_name"`
	SlotsRemaining int64     `json:"slots_remaining"`
}

func (q *Queries) GetExaminationScheduleDetail(ctx context.Context, scheduleID int64) (GetExaminationScheduleDetailRow, error) {
	row := q.db.QueryRowContext(ctx, getExaminationScheduleDetail, scheduleID)
	var i GetExaminationScheduleDetailRow
	err := row.Scan(
		&i.ID,
		&i.StartTime,
		&i.EndTime,
		&i.DentistName,
		&i.RoomName,
		&i.SlotsRemaining,
	)
	return i, err
}

const getScheduleOverlap = `-- name: GetScheduleOverlap :many
SELECT s.id
FROM schedules s
WHERE s.room_id = $1
  AND s.start_time = $2
  AND s.end_time = $3
`

type GetScheduleOverlapParams struct {
	RoomID    int64     `json:"room_id"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
}

func (q *Queries) GetScheduleOverlap(ctx context.Context, arg GetScheduleOverlapParams) ([]int64, error) {
	rows, err := q.db.QueryContext(ctx, getScheduleOverlap, arg.RoomID, arg.StartTime, arg.EndTime)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []int64{}
	for rows.Next() {
		var id int64
		if err := rows.Scan(&id); err != nil {
			return nil, err
		}
		items = append(items, id)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listAvailableExaminationSchedulesByDate = `-- name: ListAvailableExaminationSchedulesByDate :many
SELECT s.id as schedule_id, s.type, s.start_time, s.end_time, u.full_name as dentist_name, r.name as room_name
FROM schedules s
         JOIN users u ON s.dentist_id = u.id
         JOIN rooms r ON s.room_id = r.id
         JOIN examination_schedule_detail esd ON s.id = esd.schedule_id
WHERE s.start_time::date = $1::date
    AND esd.slots_remaining > 0
ORDER BY s.start_time ASC
`

type ListAvailableExaminationSchedulesByDateRow struct {
	ScheduleID  int64     `json:"schedule_id"`
	Type        string    `json:"type"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
	DentistName string    `json:"dentist_name"`
	RoomName    string    `json:"room_name"`
}

func (q *Queries) ListAvailableExaminationSchedulesByDate(ctx context.Context, date time.Time) ([]ListAvailableExaminationSchedulesByDateRow, error) {
	rows, err := q.db.QueryContext(ctx, listAvailableExaminationSchedulesByDate, date)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListAvailableExaminationSchedulesByDateRow{}
	for rows.Next() {
		var i ListAvailableExaminationSchedulesByDateRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.Type,
			&i.StartTime,
			&i.EndTime,
			&i.DentistName,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listExaminationSchedules = `-- name: ListExaminationSchedules :many
SELECT s.id as schedule_id, s.type, s.start_time, s.end_time, u.full_name as dentist_name, r.name as room_name
FROM schedules s
         JOIN users u ON s.dentist_id = u.id
         JOIN rooms r ON s.room_id = r.id
         JOIN examination_schedule_detail esd ON s.id = esd.schedule_id
ORDER BY s.start_time ASC
`

type ListExaminationSchedulesRow struct {
	ScheduleID  int64     `json:"schedule_id"`
	Type        string    `json:"type"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
	DentistName string    `json:"dentist_name"`
	RoomName    string    `json:"room_name"`
}

func (q *Queries) ListExaminationSchedules(ctx context.Context) ([]ListExaminationSchedulesRow, error) {
	rows, err := q.db.QueryContext(ctx, listExaminationSchedules)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListExaminationSchedulesRow{}
	for rows.Next() {
		var i ListExaminationSchedulesRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.Type,
			&i.StartTime,
			&i.EndTime,
			&i.DentistName,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateExaminationScheduleSlotsRemaining = `-- name: UpdateExaminationScheduleSlotsRemaining :exec
UPDATE examination_schedule_detail
SET slots_remaining = slots_remaining - 1
WHERE schedule_id = $1
`

func (q *Queries) UpdateExaminationScheduleSlotsRemaining(ctx context.Context, scheduleID int64) error {
	_, err := q.db.ExecContext(ctx, updateExaminationScheduleSlotsRemaining, scheduleID)
	return err
}

const updateServiceCategoryOfExaminationSchedule = `-- name: UpdateServiceCategoryOfExaminationSchedule :exec
UPDATE examination_schedule_detail
SET service_category_id = $2
WHERE schedule_id = $1
`

type UpdateServiceCategoryOfExaminationScheduleParams struct {
	ScheduleID        int64         `json:"schedule_id"`
	ServiceCategoryID sql.NullInt64 `json:"service_category_id"`
}

func (q *Queries) UpdateServiceCategoryOfExaminationSchedule(ctx context.Context, arg UpdateServiceCategoryOfExaminationScheduleParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceCategoryOfExaminationSchedule, arg.ScheduleID, arg.ServiceCategoryID)
	return err
}
