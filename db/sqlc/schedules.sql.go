// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: schedules.sql

package db

import (
	"context"
	"time"
)

const createExaminationScheduleDetail = `-- name: CreateExaminationScheduleDetail :one
INSERT INTO examination_schedule_detail (schedule_id, service_category_id)
VALUES ($1, $2) RETURNING schedule_id, service_category_id, slots_remain, created_at
`

type CreateExaminationScheduleDetailParams struct {
	ScheduleID        int64 `json:"schedule_id"`
	ServiceCategoryID int64 `json:"service_category_id"`
}

func (q *Queries) CreateExaminationScheduleDetail(ctx context.Context, arg CreateExaminationScheduleDetailParams) (ExaminationScheduleDetail, error) {
	row := q.db.QueryRowContext(ctx, createExaminationScheduleDetail, arg.ScheduleID, arg.ServiceCategoryID)
	var i ExaminationScheduleDetail
	err := row.Scan(
		&i.ScheduleID,
		&i.ServiceCategoryID,
		&i.SlotsRemain,
		&i.CreatedAt,
	)
	return i, err
}

const createSchedule = `-- name: CreateSchedule :one
INSERT INTO schedules (type, start_time, end_time, dentist_id, room_id)
VALUES ($1, $2, $3, $4, $5) RETURNING id, type, start_time, end_time, dentist_id, room_id, created_at
`

type CreateScheduleParams struct {
	Type      string    `json:"type"`
	StartTime time.Time `json:"start_time"`
	EndTime   time.Time `json:"end_time"`
	DentistID int64     `json:"dentist_id"`
	RoomID    int64     `json:"room_id"`
}

func (q *Queries) CreateSchedule(ctx context.Context, arg CreateScheduleParams) (Schedule, error) {
	row := q.db.QueryRowContext(ctx, createSchedule,
		arg.Type,
		arg.StartTime,
		arg.EndTime,
		arg.DentistID,
		arg.RoomID,
	)
	var i Schedule
	err := row.Scan(
		&i.ID,
		&i.Type,
		&i.StartTime,
		&i.EndTime,
		&i.DentistID,
		&i.RoomID,
		&i.CreatedAt,
	)
	return i, err
}

const getExaminationScheduleDetail = `-- name: GetExaminationScheduleDetail :one
SELECT s.id        as schedule_id,
       s.start_time,
       s.end_time,
       u.full_name as dentist_name,
       r.name      as room_name,
       sc.name     as service_category_name,
       sc.cost     as service_category_cost
FROM schedules s
         JOIN examination_schedule_detail sd ON s.id = sd.schedule_id
         JOIN users u ON s.dentist_id = u.id
         JOIN rooms r ON s.room_id = r.id
         JOIN service_categories sc ON sd.service_category_id = sc.id
WHERE s.id = $1
`

type GetExaminationScheduleDetailRow struct {
	ScheduleID          int64     `json:"schedule_id"`
	StartTime           time.Time `json:"start_time"`
	EndTime             time.Time `json:"end_time"`
	DentistName         string    `json:"dentist_name"`
	RoomName            string    `json:"room_name"`
	ServiceCategoryName string    `json:"service_category_name"`
	ServiceCategoryCost int64     `json:"service_category_cost"`
}

func (q *Queries) GetExaminationScheduleDetail(ctx context.Context, scheduleID int64) (GetExaminationScheduleDetailRow, error) {
	row := q.db.QueryRowContext(ctx, getExaminationScheduleDetail, scheduleID)
	var i GetExaminationScheduleDetailRow
	err := row.Scan(
		&i.ScheduleID,
		&i.StartTime,
		&i.EndTime,
		&i.DentistName,
		&i.RoomName,
		&i.ServiceCategoryName,
		&i.ServiceCategoryCost,
	)
	return i, err
}

const listExaminationSchedulesByDateAndServiceCategory = `-- name: ListExaminationSchedulesByDateAndServiceCategory :many
SELECT s.id as schedule_id, s.type, s.start_time, s.end_time, u.full_name as dentist_name, r.name as room_name
FROM schedules s
         JOIN users u ON s.dentist_id = u.id
         JOIN rooms r ON s.room_id = r.id
         JOIN examination_schedule_detail esd ON s.id = esd.schedule_id
WHERE s.start_time::date = $1::date
AND esd.service_category_id = $2
ORDER BY s.start_time ASC
`

type ListExaminationSchedulesByDateAndServiceCategoryParams struct {
	Date              time.Time `json:"date"`
	ServiceCategoryID int64     `json:"service_category_id"`
}

type ListExaminationSchedulesByDateAndServiceCategoryRow struct {
	ScheduleID  int64     `json:"schedule_id"`
	Type        string    `json:"type"`
	StartTime   time.Time `json:"start_time"`
	EndTime     time.Time `json:"end_time"`
	DentistName string    `json:"dentist_name"`
	RoomName    string    `json:"room_name"`
}

func (q *Queries) ListExaminationSchedulesByDateAndServiceCategory(ctx context.Context, arg ListExaminationSchedulesByDateAndServiceCategoryParams) ([]ListExaminationSchedulesByDateAndServiceCategoryRow, error) {
	rows, err := q.db.QueryContext(ctx, listExaminationSchedulesByDateAndServiceCategory, arg.Date, arg.ServiceCategoryID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListExaminationSchedulesByDateAndServiceCategoryRow{}
	for rows.Next() {
		var i ListExaminationSchedulesByDateAndServiceCategoryRow
		if err := rows.Scan(
			&i.ScheduleID,
			&i.Type,
			&i.StartTime,
			&i.EndTime,
			&i.DentistName,
			&i.RoomName,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
