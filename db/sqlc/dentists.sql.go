// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: dentists.sql

package db

import (
	"context"
	"time"
)

const createDentistDetail = `-- name: CreateDentistDetail :one
INSERT INTO dentist_detail (dentist_id, date_of_birth, gender, specialty_id)
VALUES ($1, $2, $3, $4) RETURNING dentist_id, date_of_birth, gender, specialty_id
`

type CreateDentistDetailParams struct {
	DentistID   int64     `json:"dentist_id"`
	DateOfBirth time.Time `json:"date_of_birth"`
	Gender      string    `json:"gender"`
	SpecialtyID int64     `json:"specialty_id"`
}

func (q *Queries) CreateDentistDetail(ctx context.Context, arg CreateDentistDetailParams) (DentistDetail, error) {
	row := q.db.QueryRowContext(ctx, createDentistDetail,
		arg.DentistID,
		arg.DateOfBirth,
		arg.Gender,
		arg.SpecialtyID,
	)
	var i DentistDetail
	err := row.Scan(
		&i.DentistID,
		&i.DateOfBirth,
		&i.Gender,
		&i.SpecialtyID,
	)
	return i, err
}

const getDentist = `-- name: GetDentist :one
SELECT users.id,
       users.full_name,
       users.email,
       users.phone_number,
       users.created_at,
       dentist_detail.date_of_birth,
       dentist_detail.gender,
       specialties.id   AS specialty_id,
       specialties.name AS specialty_name
FROM users
         JOIN dentist_detail ON users.id = dentist_detail.dentist_id
         JOIN specialties ON dentist_detail.specialty_id = specialties.id
WHERE users.id = $1
  AND users.role = 'Dentist'
`

type GetDentistRow struct {
	ID            int64     `json:"id"`
	FullName      string    `json:"full_name"`
	Email         string    `json:"email"`
	PhoneNumber   string    `json:"phone_number"`
	CreatedAt     time.Time `json:"created_at"`
	DateOfBirth   time.Time `json:"date_of_birth"`
	Gender        string    `json:"gender"`
	SpecialtyID   int64     `json:"specialty_id"`
	SpecialtyName string    `json:"specialty_name"`
}

func (q *Queries) GetDentist(ctx context.Context, id int64) (GetDentistRow, error) {
	row := q.db.QueryRowContext(ctx, getDentist, id)
	var i GetDentistRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Email,
		&i.PhoneNumber,
		&i.CreatedAt,
		&i.DateOfBirth,
		&i.Gender,
		&i.SpecialtyID,
		&i.SpecialtyName,
	)
	return i, err
}

const listDentists = `-- name: ListDentists :many
SELECT users.id,
       users.full_name,
       users.email,
       users.phone_number,
       users.created_at,
       dentist_detail.date_of_birth,
       dentist_detail.gender,
       specialties.name AS specialty
FROM users
         JOIN dentist_detail ON users.id = dentist_detail.dentist_id
         JOIN specialties ON dentist_detail.specialty_id = specialties.id
WHERE users.role = 'Dentist'
ORDER BY users.created_at DESC
`

type ListDentistsRow struct {
	ID          int64     `json:"id"`
	FullName    string    `json:"full_name"`
	Email       string    `json:"email"`
	PhoneNumber string    `json:"phone_number"`
	CreatedAt   time.Time `json:"created_at"`
	DateOfBirth time.Time `json:"date_of_birth"`
	Gender      string    `json:"gender"`
	Specialty   string    `json:"specialty"`
}

func (q *Queries) ListDentists(ctx context.Context) ([]ListDentistsRow, error) {
	rows, err := q.db.QueryContext(ctx, listDentists)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDentistsRow{}
	for rows.Next() {
		var i ListDentistsRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.DateOfBirth,
			&i.Gender,
			&i.Specialty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listDentistsByName = `-- name: ListDentistsByName :many
SELECT users.id,
       users.full_name,
       users.email,
       users.phone_number,
       users.created_at,
       dentist_detail.date_of_birth,
       dentist_detail.gender,
       specialties.name AS specialty
FROM users
         JOIN dentist_detail ON users.id = dentist_detail.dentist_id
         JOIN specialties ON dentist_detail.specialty_id = specialties.id
WHERE users.role = 'Dentist'
  AND users.full_name ILIKE '%' || $1::text || '%'
ORDER BY users.created_at DESC
`

type ListDentistsByNameRow struct {
	ID          int64     `json:"id"`
	FullName    string    `json:"full_name"`
	Email       string    `json:"email"`
	PhoneNumber string    `json:"phone_number"`
	CreatedAt   time.Time `json:"created_at"`
	DateOfBirth time.Time `json:"date_of_birth"`
	Gender      string    `json:"gender"`
	Specialty   string    `json:"specialty"`
}

func (q *Queries) ListDentistsByName(ctx context.Context, name string) ([]ListDentistsByNameRow, error) {
	rows, err := q.db.QueryContext(ctx, listDentistsByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListDentistsByNameRow{}
	for rows.Next() {
		var i ListDentistsByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.Email,
			&i.PhoneNumber,
			&i.CreatedAt,
			&i.DateOfBirth,
			&i.Gender,
			&i.Specialty,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateDentistDetail = `-- name: UpdateDentistDetail :one
UPDATE dentist_detail
SET date_of_birth = $2,
    gender        = $3,
    specialty_id  = $4
WHERE dentist_id = $1 RETURNING dentist_id, date_of_birth, gender, specialty_id
`

type UpdateDentistDetailParams struct {
	DentistID   int64     `json:"dentist_id"`
	DateOfBirth time.Time `json:"date_of_birth"`
	Gender      string    `json:"gender"`
	SpecialtyID int64     `json:"specialty_id"`
}

func (q *Queries) UpdateDentistDetail(ctx context.Context, arg UpdateDentistDetailParams) (DentistDetail, error) {
	row := q.db.QueryRowContext(ctx, updateDentistDetail,
		arg.DentistID,
		arg.DateOfBirth,
		arg.Gender,
		arg.SpecialtyID,
	)
	var i DentistDetail
	err := row.Scan(
		&i.DentistID,
		&i.DateOfBirth,
		&i.Gender,
		&i.SpecialtyID,
	)
	return i, err
}
