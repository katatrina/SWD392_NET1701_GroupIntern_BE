// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: appointments.sql

package db

import (
	"context"
	"time"

	util "github.com/katatrina/SWD392_NET1701_GroupIntern_BE/internal/util"
)

const createAppointment = `-- name: CreateAppointment :one
INSERT INTO appointments (booking_id, schedule_id, patient_id)
VALUES ($1, $2, $3) RETURNING id, booking_id, schedule_id, patient_id, status, created_at
`

type CreateAppointmentParams struct {
	BookingID  int64 `json:"booking_id"`
	ScheduleID int64 `json:"schedule_id"`
	PatientID  int64 `json:"patient_id"`
}

func (q *Queries) CreateAppointment(ctx context.Context, arg CreateAppointmentParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, createAppointment, arg.BookingID, arg.ScheduleID, arg.PatientID)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.ScheduleID,
		&i.PatientID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const createExaminationAppointmentDetail = `-- name: CreateExaminationAppointmentDetail :one
INSERT INTO examination_appointment_detail (appointment_id, service_category_id)
VALUES ($1, $2) RETURNING appointment_id, service_category_id, created_at
`

type CreateExaminationAppointmentDetailParams struct {
	AppointmentID     int64              `json:"appointment_id"`
	ServiceCategoryID util.JSONNullInt64 `json:"service_category_id"`
}

func (q *Queries) CreateExaminationAppointmentDetail(ctx context.Context, arg CreateExaminationAppointmentDetailParams) (ExaminationAppointmentDetail, error) {
	row := q.db.QueryRowContext(ctx, createExaminationAppointmentDetail, arg.AppointmentID, arg.ServiceCategoryID)
	var i ExaminationAppointmentDetail
	err := row.Scan(&i.AppointmentID, &i.ServiceCategoryID, &i.CreatedAt)
	return i, err
}

const createTreatmentAppointmentDetail = `-- name: CreateTreatmentAppointmentDetail :one
INSERT INTO treatment_appointment_detail (appointment_id, service_id, service_quantity)
VALUES ($1, $2, $3) RETURNING appointment_id, service_id, service_quantity, created_at
`

type CreateTreatmentAppointmentDetailParams struct {
	AppointmentID   int64 `json:"appointment_id"`
	ServiceID       int64 `json:"service_id"`
	ServiceQuantity int64 `json:"service_quantity"`
}

func (q *Queries) CreateTreatmentAppointmentDetail(ctx context.Context, arg CreateTreatmentAppointmentDetailParams) (TreatmentAppointmentDetail, error) {
	row := q.db.QueryRowContext(ctx, createTreatmentAppointmentDetail, arg.AppointmentID, arg.ServiceID, arg.ServiceQuantity)
	var i TreatmentAppointmentDetail
	err := row.Scan(
		&i.AppointmentID,
		&i.ServiceID,
		&i.ServiceQuantity,
		&i.CreatedAt,
	)
	return i, err
}

const getAppointmentByBookingID = `-- name: GetAppointmentByBookingID :one
SELECT id, booking_id, schedule_id, patient_id, status, created_at
FROM appointments
WHERE booking_id = $1
`

func (q *Queries) GetAppointmentByBookingID(ctx context.Context, bookingID int64) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, getAppointmentByBookingID, bookingID)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.ScheduleID,
		&i.PatientID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getAppointmentByScheduleIDAndPatientID = `-- name: GetAppointmentByScheduleIDAndPatientID :one
SELECT id, booking_id, schedule_id, patient_id, status, created_at
FROM appointments
WHERE schedule_id = $1
  AND patient_id = $2
`

type GetAppointmentByScheduleIDAndPatientIDParams struct {
	ScheduleID int64 `json:"schedule_id"`
	PatientID  int64 `json:"patient_id"`
}

func (q *Queries) GetAppointmentByScheduleIDAndPatientID(ctx context.Context, arg GetAppointmentByScheduleIDAndPatientIDParams) (Appointment, error) {
	row := q.db.QueryRowContext(ctx, getAppointmentByScheduleIDAndPatientID, arg.ScheduleID, arg.PatientID)
	var i Appointment
	err := row.Scan(
		&i.ID,
		&i.BookingID,
		&i.ScheduleID,
		&i.PatientID,
		&i.Status,
		&i.CreatedAt,
	)
	return i, err
}

const getExaminationAppointmentDetails = `-- name: GetExaminationAppointmentDetails :one
SELECT b.id        as booking_id,
       b.type,
       b.status    as booking_status,
       b.payment_status,
       sc.name     as service_category,
       s.start_time,
       s.end_time,
       u.full_name as dentist_name,
       r.name      as room_name,
       b.total_cost
FROM bookings b
         JOIN appointments a ON b.id = a.booking_id
         JOIN schedules s ON a.schedule_id = s.id
         JOIN examination_appointment_detail ead ON a.id = ead.appointment_id
         JOIN users u ON s.dentist_id = u.id
         JOIN dentist_detail dd ON u.id = dd.dentist_id
         JOIN rooms r ON s.room_id = r.id
         LEFT JOIN service_categories sc ON ead.service_category_id = sc.id
WHERE b.id = $1
  AND b.type = 'Examination'
  AND b.patient_id = $2
`

type GetExaminationAppointmentDetailsParams struct {
	BookingID int64 `json:"booking_id"`
	PatientID int64 `json:"patient_id"`
}

type GetExaminationAppointmentDetailsRow struct {
	BookingID       int64               `json:"booking_id"`
	Type            string              `json:"type"`
	BookingStatus   string              `json:"booking_status"`
	PaymentStatus   string              `json:"payment_status"`
	ServiceCategory util.JSONNullString `json:"service_category"`
	StartTime       time.Time           `json:"start_time"`
	EndTime         time.Time           `json:"end_time"`
	DentistName     string              `json:"dentist_name"`
	RoomName        string              `json:"room_name"`
	TotalCost       int64               `json:"total_cost"`
}

func (q *Queries) GetExaminationAppointmentDetails(ctx context.Context, arg GetExaminationAppointmentDetailsParams) (GetExaminationAppointmentDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getExaminationAppointmentDetails, arg.BookingID, arg.PatientID)
	var i GetExaminationAppointmentDetailsRow
	err := row.Scan(
		&i.BookingID,
		&i.Type,
		&i.BookingStatus,
		&i.PaymentStatus,
		&i.ServiceCategory,
		&i.StartTime,
		&i.EndTime,
		&i.DentistName,
		&i.RoomName,
		&i.TotalCost,
	)
	return i, err
}

const getTreatmentAppointmentDetails = `-- name: GetTreatmentAppointmentDetails :one
SELECT b.id          as booking_id,
       b.type,
       b.status      as booking_status,
       b.payment_status,
       services.name as service,
       services.cost as service_cost,
       tad.service_quantity,
       s.start_time,
       s.end_time,
       u.full_name   as dentist_name,
       r.name        as room_name,
       b.total_cost
FROM bookings b
         JOIN appointments a ON b.id = a.booking_id
         JOIN schedules s ON a.schedule_id = s.id
         JOIN treatment_appointment_detail tad ON a.id = tad.appointment_id
         JOIN users u ON s.dentist_id = u.id
         JOIN dentist_detail dd ON u.id = dd.dentist_id
         JOIN rooms r ON s.room_id = r.id
         JOIN services ON tad.service_id = services.id
WHERE b.id = $1
  AND b.type = 'Treatment'
  AND b.patient_id = $2
`

type GetTreatmentAppointmentDetailsParams struct {
	BookingID int64 `json:"booking_id"`
	PatientID int64 `json:"patient_id"`
}

type GetTreatmentAppointmentDetailsRow struct {
	BookingID       int64     `json:"booking_id"`
	Type            string    `json:"type"`
	BookingStatus   string    `json:"booking_status"`
	PaymentStatus   string    `json:"payment_status"`
	Service         string    `json:"service"`
	ServiceCost     int64     `json:"service_cost"`
	ServiceQuantity int64     `json:"service_quantity"`
	StartTime       time.Time `json:"start_time"`
	EndTime         time.Time `json:"end_time"`
	DentistName     string    `json:"dentist_name"`
	RoomName        string    `json:"room_name"`
	TotalCost       int64     `json:"total_cost"`
}

func (q *Queries) GetTreatmentAppointmentDetails(ctx context.Context, arg GetTreatmentAppointmentDetailsParams) (GetTreatmentAppointmentDetailsRow, error) {
	row := q.db.QueryRowContext(ctx, getTreatmentAppointmentDetails, arg.BookingID, arg.PatientID)
	var i GetTreatmentAppointmentDetailsRow
	err := row.Scan(
		&i.BookingID,
		&i.Type,
		&i.BookingStatus,
		&i.PaymentStatus,
		&i.Service,
		&i.ServiceCost,
		&i.ServiceQuantity,
		&i.StartTime,
		&i.EndTime,
		&i.DentistName,
		&i.RoomName,
		&i.TotalCost,
	)
	return i, err
}

const updateAppointmentStatus = `-- name: UpdateAppointmentStatus :exec
UPDATE appointments
SET status = $2
WHERE id = $1
`

type UpdateAppointmentStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateAppointmentStatus(ctx context.Context, arg UpdateAppointmentStatusParams) error {
	_, err := q.db.ExecContext(ctx, updateAppointmentStatus, arg.ID, arg.Status)
	return err
}
