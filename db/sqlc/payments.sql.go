// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: payments.sql

package db

import (
	"context"
)

const createPayment = `-- name: CreatePayment :one
INSERT INTO payments (name)
VALUES ($1) RETURNING id, name, created_at
`

func (q *Queries) CreatePayment(ctx context.Context, name string) (Payment, error) {
	row := q.db.QueryRowContext(ctx, createPayment, name)
	var i Payment
	err := row.Scan(&i.ID, &i.Name, &i.CreatedAt)
	return i, err
}

const listPayments = `-- name: ListPayments :many
SELECT id, name, created_at FROM payments
`

func (q *Queries) ListPayments(ctx context.Context) ([]Payment, error) {
	rows, err := q.db.QueryContext(ctx, listPayments)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Payment{}
	for rows.Next() {
		var i Payment
		if err := rows.Scan(&i.ID, &i.Name, &i.CreatedAt); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
