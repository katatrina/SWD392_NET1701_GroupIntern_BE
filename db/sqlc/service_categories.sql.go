// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: service_categories.sql

package db

import (
	"context"
)

const createServiceCategory = `-- name: CreateServiceCategory :one
INSERT INTO service_categories (name, icon_url, banner_url, slug, description)
VALUES ($1, $2, $3, $4, $5) RETURNING id, name, icon_url, banner_url, description, slug, created_at
`

type CreateServiceCategoryParams struct {
	Name        string `json:"name"`
	IconUrl     string `json:"icon_url"`
	BannerUrl   string `json:"banner_url"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
}

func (q *Queries) CreateServiceCategory(ctx context.Context, arg CreateServiceCategoryParams) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, createServiceCategory,
		arg.Name,
		arg.IconUrl,
		arg.BannerUrl,
		arg.Slug,
		arg.Description,
	)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IconUrl,
		&i.BannerUrl,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
	)
	return i, err
}

const deleteServiceCategory = `-- name: DeleteServiceCategory :exec
DELETE
FROM service_categories
WHERE id = $1
`

func (q *Queries) DeleteServiceCategory(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteServiceCategory, id)
	return err
}

const getServiceCategoryByID = `-- name: GetServiceCategoryByID :one
SELECT id, name, icon_url, banner_url, description, slug, created_at
FROM service_categories
WHERE id = $1
`

func (q *Queries) GetServiceCategoryByID(ctx context.Context, id int64) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, getServiceCategoryByID, id)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IconUrl,
		&i.BannerUrl,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
	)
	return i, err
}

const getServiceCategoryBySlug = `-- name: GetServiceCategoryBySlug :one
SELECT id, name, icon_url, banner_url, description, slug, created_at
FROM service_categories
WHERE slug = $1
`

func (q *Queries) GetServiceCategoryBySlug(ctx context.Context, slug string) (ServiceCategory, error) {
	row := q.db.QueryRowContext(ctx, getServiceCategoryBySlug, slug)
	var i ServiceCategory
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.IconUrl,
		&i.BannerUrl,
		&i.Description,
		&i.Slug,
		&i.CreatedAt,
	)
	return i, err
}

const listServiceCategories = `-- name: ListServiceCategories :many
SELECT id, name, icon_url, banner_url, description, slug, created_at
FROM service_categories
ORDER BY created_at DESC
`

func (q *Queries) ListServiceCategories(ctx context.Context) ([]ServiceCategory, error) {
	rows, err := q.db.QueryContext(ctx, listServiceCategories)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServiceCategory{}
	for rows.Next() {
		var i ServiceCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IconUrl,
			&i.BannerUrl,
			&i.Description,
			&i.Slug,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServiceCategoriesByName = `-- name: ListServiceCategoriesByName :many
SELECT id, name, icon_url, banner_url, description, slug, created_at
FROM service_categories
WHERE name ILIKE '%' || $1::text || '%'
ORDER BY created_at DESC
`

func (q *Queries) ListServiceCategoriesByName(ctx context.Context, name string) ([]ServiceCategory, error) {
	rows, err := q.db.QueryContext(ctx, listServiceCategoriesByName, name)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ServiceCategory{}
	for rows.Next() {
		var i ServiceCategory
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.IconUrl,
			&i.BannerUrl,
			&i.Description,
			&i.Slug,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listServicesByCategory = `-- name: ListServicesByCategory :many
SELECT id, name, category_id, unit, cost, warranty_duration, created_at
FROM services
WHERE category_id = (SELECT id FROM service_categories WHERE slug = $1)
ORDER BY created_at DESC
`

func (q *Queries) ListServicesByCategory(ctx context.Context, slug string) ([]Service, error) {
	rows, err := q.db.QueryContext(ctx, listServicesByCategory, slug)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Service{}
	for rows.Next() {
		var i Service
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.CategoryID,
			&i.Unit,
			&i.Cost,
			&i.WarrantyDuration,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceCategory = `-- name: UpdateServiceCategory :exec
UPDATE service_categories
SET name        = $2,
    icon_url    = $3,
    banner_url  = $4,
    slug        = $5,
    description = $6
WHERE id = $1
`

type UpdateServiceCategoryParams struct {
	ID          int64  `json:"id"`
	Name        string `json:"name"`
	IconUrl     string `json:"icon_url"`
	BannerUrl   string `json:"banner_url"`
	Slug        string `json:"slug"`
	Description string `json:"description"`
}

func (q *Queries) UpdateServiceCategory(ctx context.Context, arg UpdateServiceCategoryParams) error {
	_, err := q.db.ExecContext(ctx, updateServiceCategory,
		arg.ID,
		arg.Name,
		arg.IconUrl,
		arg.BannerUrl,
		arg.Slug,
		arg.Description,
	)
	return err
}
